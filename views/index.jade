extends layout

block content
  .newMapping.grid_4
    .grid_4.alpha.omega
      h3
        | New 
        a(href='#', id='createMapping') +
    .key.grid_1.alpha.omega
      label(for='alias') Alias:
    .grid_3.alpha.omega
      input(type='text', id='alias')
    .key.grid_1.alpha.omega
      label(for='url') URL:
    .grid_3.alpha.omega
      input(type='text', id='url')
    .key.grid_1.alpha.omega
      label(for='action') Action:
    .grid_3.alpha.omega
      select(id='action')
        option(value='download') download
        option(value='redirect') redirect
    .key.grid_1.alpha.omega.redirectOption
      label(for='type') Type:
    .grid_3.alpha.omega.redirectOption
      select(id='type')
        option(value='permanent') permanent
        option(value='temporary') temporary
    .key.grid_1.alpha.omega.downloadOption
      label(for='fileName') File name:
    .grid_3.alpha.omega.downloadOption
      input(type='text', id='fileName')
    .key.grid_1.alpha.omega.downloadOption
      label(for='contentType') Content type:
    .grid_3.alpha.omega.downloadOption
      input(type='text', id='contentType')
    .key.grid_1.alpha.omega.downloadOption
      label(for='forceDownload') Force download:
    .grid_3.alpha.omega.downloadOption
      select(id='forceDownload')
        option(value='false') false
        option(value='true') true
    .key.grid_1.alpha.omega
      label(for='validFrom') Valid from:
    .grid_3.alpha.omega
      input(type='datetime', id='validFrom')
    .key.grid_1.alpha.omega
      label(for='validBefore') Valid before:
    .grid_3.alpha.omega
      input(type='datetime', id='validBefore')

  script(type='text/jade')#mappingTemplate.
    .mapping.grid_4(id='mapping_\#{alias}')
      .grid_4.alpha.omega
        h3
          if action === 'redirect'
            img.snapshot(src='/snapshots/\#{alias}.png', width='53', height='30')
            |  \#{alias}
          else
            | \#{alias}
          a(href="javascript:void now.deleteMapping('\#{alias}');") X
      .key.grid_1.alpha URL:
      .grid_3.omega: a(href='\#{alias}')= url
      .key.grid_1.alpha Action:
      .grid_3.omega= action
      if action === 'redirect'
        .key.grid_1.alpha Type:
        .grid_3.omega= type
      else if action === 'download'
        .key.grid_1.alpha File name:
        .grid_3.omega= fileName
        .key.grid_1.alpha Content type:
        .grid_3.omega= contentType
        .key.grid_1.alpha Force download:
        .grid_3.omega= forceDownload
      .grid_4.alpha.omega
        h4 Constraints
      if typeof constraints !== 'undefined'
        if typeof constraints.validFrom !== 'undefined'
          .key.grid_1.alpha Valid from:
          .grid_3.omega= constraints.validFrom
        if typeof constraints.validBefore !== 'undefined'
          .key.grid_1.alpha Valid before:
          .grid_3.omega= constraints.validBefore
      else
        .grid_4.alpha.omega n/a

  script(type='text/javascript').
    $(function () {
      var template = jade.compile($('#mappingTemplate').text());

      function toggleOptions() {
        if($('#action').val() === 'redirect') {
          $('.downloadOption').hide();
          $('.redirectOption').show();
        } else {
          $('.downloadOption').show();
          $('.redirectOption').hide();
        }
      }

      $('#action').change(toggleOptions);

      $('#createMapping').click(function () {
        var mapping = {
          alias: $('#alias').val(),
          url: $('#url').val(),
          action: $('#action').val()
        };

        if(mapping.action === 'redirect') {
          $.extend(mapping, {
            type: $('#type').val()
          });
        } else {
          $.extend(mapping, {
            fileName: $('#fileName').val(),
            contentType: $('#contentType').val(),
            forceDownload: $('#forceDownload').val()
          });
        }

        $.each(['validFrom', 'validBefore'], function (index, id) {
          var value = $('#' + id).val();
          if(value) {
            !mapping.constraints && (mapping.constraints = {});
            mapping.constraints[id] = value;
          }
        });

        now.createMapping(mapping);

        $.each(
          ['alias', 'url', 'type', 'fileName', 'contentType', 'validFrom', 'validBefore'],
          function(index, id) {
            $('#' + id).val('')
          }
        );
      });

      now.initialize = function (mappings) {
        $('#content .mapping').remove();
        for(var i = 0, len = mappings.length; i < len; i++) {
          $('#content').append(template(mappings[i]));
        }
      };

      now.mappingCreated = function (mapping) {
        $('#content').append(template(mapping));
      };

      now.mappingDeleted = function (alias) {
        $('#mapping_' + alias).remove();
      };

      now.snapshotCreated = function (alias) {
        $('#mapping_' + alias + ' .snapshot').attr('src', '/snapshots/' + alias + '.png');
      };

      toggleOptions();
    });